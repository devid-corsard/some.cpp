#include "lib.hpp"
#include <ctime>
#include <iostream>
#include <malloc/_malloc.h>
#include <optional>
#include <ostream>
#include <set>
#include <string>
#include <sys/_types/_size_t.h>
#include <sys/types.h>
#include <vector>

using namespace std;

class Kitty {
  public:
    Kitty(int hunger = 0, int boredom = 0);
    void Talk();
    void Eat(int food = 4);
    void Play(int fun = 4);

  private:
    int hunger;
    int boredom;
    int GetMood() const;
    void PassTime(int time = 1);
};

Kitty::Kitty(int hunger, int boredom) : hunger(hunger), boredom(boredom) {}

inline int Kitty::GetMood() const { return (hunger + boredom); }

void Kitty::PassTime(int time) {
    hunger += time;
    boredom += time;
};

void Kitty::Talk() {
    std::cout << "I'm a kittyðŸ˜¼ and i'm feeling ";
    int mood = GetMood();
    if (mood > 15) {
        std::cout << "madðŸ˜¡." << std::endl;
    } else if (mood > 10) {
        std::cout << "depressedðŸ˜©." << std::endl;
    } else if (mood > 5) {
        std::cout << "okayðŸ¥±." << std::endl;
    } else {
        std::cout << "gooooooodðŸ˜Œ!" << std::endl;
    }
    PassTime();
};
void Kitty::Eat(int food) {
    hunger -= food;
    if (hunger < 0) {
        hunger = 0;
        std::cout << "EwwwðŸ¤¢..." << std::endl;
    } else {
        std::cout << "Om-nom-nomðŸ˜€" << std::endl;
    }
    PassTime();
};
void Kitty::Play(int fun) {
    boredom -= fun;
    if (boredom < 0) {
        std::cout << "C'monðŸ« ..." << std::endl;
        boredom = 0;
    } else {

        std::cout << "UeeeðŸ¥³" << std::endl;
    }
    PassTime();
};

int main() {
    Kitty kit;
    kit.Talk();
    int choice;
    do {
        cout << "\nKitty Care\n\n";
        cout << "0 - Quit\n";
        cout << "1 - Listen to your critter\n";
        cout << "2 - Feed your critter\n";
        cout << "3 - Play with your critter\n\n";
        cout << "Choice: ";
        cin >> choice;

        switch (choice) {
        case 0:
            cout << "Good-bye.\n";
            break;
        case 1:
            kit.Talk();
            break;
        case 2:
            kit.Eat();
            break;
        case 3:
            kit.Play();
            break;
        default:
            cout << "\nSorry, but " << choice << " isnâ€™t a valid choice.\n";
        }
    } while (choice != 0);
    return 0;
}
